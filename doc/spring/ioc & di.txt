1. IOC (Inversion Of Control)
	即控制反转，把一个对象对其他对象的依赖关系交给Bean容器去管理

2. DI (Dependent Injection)
	即以来注入，将一个对象对其他对象的依赖关系通过反射机制注入到该对象
	
	注入方式：
		1）接口注入，耦合度高，不建议使用
		2）设值注入，推荐使用方式
		3）构造方法注入，参数多时，配置繁琐
	
3. 我们可以把IOC容器的工作模式看做是工厂模式的升华，可以把IOC容器看作是一个工厂，这个工厂里要生产的对象都在配置文件中给出定义，然后利用编程语言的的反射编程，根据配置文件中给出的类名生成相应的对象。从实现来看，IOC是把以前在工厂方法里写死的对象生成代码，改变为由配置文件来定义，也就是把工厂和对象生成这两者独立分隔开来，目的就是提高灵活性和可维护性

4. 目的
	解耦、依赖插拔式、对象重用
	提高开发效率、程序可维护性、可测试性、故障排查效率