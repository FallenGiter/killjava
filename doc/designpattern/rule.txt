1. 开闭原则（Open Close Principle）
	对扩展开放，对修改关闭。在程序需要进行扩展到时候，不能去修改原有的代码，
实现一个热插拔的效果。
	为使程序的扩展性好，易于维护升级，要做到这一点，我们需要使用接口和抽象类

2. 里氏代换原则（LSP：Liskov Substitution Principle）
	该原则是面向对象设计的基本原则之一
	任何基类可以出现的地方，子类一定可以出现，LSP是继承复用的基石，只有当衍生
类可以替换掉基类，软件单位的功能不受到影响时，积累才能真正被复用，而衍生类也能
够在基类的基础上增加新的行为
	LSP是对“开-闭”原则的补充，实现“开-闭”原则的关键步骤就是抽象化

3. 依赖倒转原则（Dependence Inversion Principle）
	这是开闭原则的基础，指针对接口编程，依赖于抽象而不依赖具体
	
4. 接口隔离原则
	使用多个隔离的接口，比使用单个接口要好
	一个降低类之间耦合度的意思
	
5. 迪米特法则【最少知道原则】，（Demeter Principle）
	一个实体应当尽量与其他实体之间发生相互作用，使得系统功能模块相对独立
	
6. 合成复用原则（Composite Reuse Principle）
	尽量使用合成/聚合的方式，而不是继承
